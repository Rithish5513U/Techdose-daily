(Recursion) : 

# Approach :

=> The states of updation can be the current index, can we buy or not, remaining buy and sells we can make.
=> In last problem (III), we are limited to only 2 buy and sells, in this problem we are dealing with k remaining buy and sells
=> Base case : When the index reaches end (or) the remaining count of buying becomes 0.
=> There are two conditions for going to the next stage.

=> The only difference between III and IV is the number of buy and selling which is 2 in III and k in IV

1) If buyable -> We buy (or) not buy
2) If not buyable -> We sell (or) dont sell

Initial -> index = 0, buy = true, cnt = k

Code : 

    int recursion(int index, bool buyable, int remaining, vector<int>& prices, int n){
        if(index == n || remaining == 0)
            return 0;
        int profit = 0;

        if(buyable){
            # Decreasing the amount as we are buying and no change when not buying

            int buy = -prices[index] + recursion(index + 1, false, remaining, prices, n);
            int notBuy = recursion(index + 1, true, remaining, prices, n);
            profit = max(buy, notBuy);
        }

        else{
            # Increasing the amount as we are selling and no change when not selling

            int sell = prices[index] + recursion(index + 1, true, remaining - 1, prices, n);
            int notSell = recursion(index + 1, false, remaining, prices, n);
            profit = max(sell, notSell);
        }

        return profit;
    }

(Memoization) : 

# Same as recursion, adding dp[index][buyable][remaining] as states
# Initialize everything with -1 and after computing a single recursion call, it will store the result in dp and then return.

Code : 

    int dp[1001][2][101];
    # Initialized with -1 in the main function

    int recursion(int index, bool buyable, int remaining, vector<int>& prices, int n){
        if(index == n || remaining == 0)
            return 0;

        # If already computed return the value
        if(dp[index][buyable][remaining] != -1)
            return dp[index][buyable][remaining];
        
        int profit = 0;
        if(buyable){
            # Decreasing the amount as we are buying and no change when not buying

            int buy = -prices[index] + recursion(index + 1, false, remaining, prices, n);
            int notBuy = recursion(index + 1, true, remaining, prices, n);
            profit = max(buy, notBuy);
        }

        else{
            # Increasing the amount as we are selling and no change when not selling

            int sell = prices[index] + recursion(index + 1, true, remaining - 1, prices, n);
            int notSell = recursion(index + 1, false, remaining, prices, n);
            profit = max(sell, notSell);
        }
        
        # Store the value before returning
        return dp[index][buyable][remaining] = profit;
    }